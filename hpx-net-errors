	void neuron::run(std::vector<neuron> roots)
	{
		if(this->bias)
		{
		  this->new_value = hpx::lcos::make_ready_future((float)1.0);
		  this->value = 1.0;
		  return;
		}

//		std::vector<float> activations = future_get_roots(roots);
		std::vector<float> present_roots = extract_roots(roots);

//		std::vector<hpx::lcos::future<float>> future_roots = extract_future_roots(roots);

		float ps = productsum(present_roots,this->weights);
//		std::cout << "[" << ps << "]";
//		this->new_value = hpx::async(&future_productsum, future_roots, this->weights);
//		this->new_value = hpx::lcos::make_ready_future(ps);
		this->value = f(ps);
	}
	float neuron::get_value()
	{
	    if(!this->bias)
		    this->value = f(this->new_value.get());
	    else    this->value = 1.0;
	    return this->value;
	}

